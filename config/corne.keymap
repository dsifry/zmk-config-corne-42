#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

#define DEF 0
#define NAV 1
#define SYM 2
#define ADJ 3
#define EXTRA 4

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
        };

        para: para {
            compatible = "zmk,behavior-tap-dance";
            label = "PARA";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;
        };

        caps: caps {
            compatible = "zmk,behavior-caps-word";
            label = "CAPS";
            #binding-cells = <0>;
            continue-list = <MINUS BACKSPACE>;
        };

        paraless: paraless {
            compatible = "zmk,behavior-mod-morph";
            label = "PARALESS";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        paragreat: paragreat {
            compatible = "zmk,behavior-mod-morph";
            label = "PARAGREAT";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    macros {
        browsertab: browsertab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_release>,
                <&kp LCTRL>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // Left-hand modifier combos

        ctrl_alt {
            bindings = <&kp LA(LCTRL)>;
            key-positions = <13 14>;
        };

        ctrl_gui {
            bindings = <&kp LG(LCTRL)>;
            key-positions = <13 15>;
        };

        ctrl_shift {
            bindings = <&kp LS(LCTRL)>;
            key-positions = <13 16>;
        };

        alt_gui {
            bindings = <&kp LG(LALT)>;
            key-positions = <14 15>;
        };

        alt_shift {
            bindings = <&kp LS(LEFT_ALT)>;
            key-positions = <14 16>;
        };

        gui_shift {
            bindings = <&kp LS(LGUI)>;
            key-positions = <15 16>;
        };

        ctrl_alt_gui {
            bindings = <&kp LA(LG(LCTRL))>;
            key-positions = <13 14 15>;
        };

        ctrl_alt_shift {
            bindings = <&kp LS(LA(LCTRL))>;
            key-positions = <13 14 16>;
        };

        ctrl_gui_shift {
            bindings = <&kp LS(LG(LCTRL))>;
            key-positions = <13 15 16>;
        };

        alt_gui_shift {
            bindings = <&kp LG(LS(LALT))>;
            key-positions = <14 15 16>;
        };

        ctrl_alt_gui_shift {
            bindings = <&kp LG(LA(LS(LCTRL)))>;
            key-positions = <13 14 15 16>;
        };

        // Right-hand modifier combos

        r_ctrl_alt {
            bindings = <&kp RA(RCTRL)>;
            key-positions = <22 21>;
        };

        r_ctrl_gui {
            bindings = <&kp RG(RCTRL)>;
            key-positions = <22 20>;
        };

        r_ctrl_shift {
            bindings = <&kp RS(RCTRL)>;
            key-positions = <22 19>;
        };

        r_alt_gui {
            bindings = <&kp RG(RALT)>;
            key-positions = <21 20>;
        };

        r_alt_shift {
            bindings = <&kp RS(RALT)>;
            key-positions = <21 19>;
        };

        r_gui_shift {
            bindings = <&kp RS(RGUI)>;
            key-positions = <20 19>;
        };

        r_ctrl_alt_gui {
            bindings = <&kp RA(RG(RCTRL))>;
            key-positions = <22 21 20>;
        };

        r_ctrl_alt_shift {
            bindings = <&kp RS(RA(RCTRL))>;
            key-positions = <22 21 19>;
        };

        r_ctrl_gui_shift {
            bindings = <&kp RS(RG(RCTRL))>;
            key-positions = <22 20 19>;
        };

        r_alt_gui_shift {
            bindings = <&kp RG(RS(RALT))>;
            key-positions = <21 20 19>;
        };

        r_ctrl_alt_gui_shift {
            bindings = <&kp RS(RA(RG(RCTRL)))>;
            key-positions = <22 21 20 19>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <13 1>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <15 21>;
        };

        perc {
            bindings = <&kp PERCENT>;
            key-positions = <5 17>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <28 16>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <4 16>;
        };

        pound {
            bindings = <&kp POUND>;
            key-positions = <3 15>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <2 14>;
        };

        mybackslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <26 14>;
        };

        cut {
            bindings = <&kp C_AC_CUT>;
            key-positions = <27 25>;
        };

        copy {
            bindings = <&kp C_AC_COPY>;
            key-positions = <27 26>;
        };

        paste {
            bindings = <&kp C_AC_PASTE>;
            key-positions = <27 28>;
        };

        para-less {
            bindings = <&paraless>;
            key-positions = <20 19>;
        };

        para-great {
            bindings = <&paragreat>;
            key-positions = <20 21>;
        };

        myquestion {
            bindings = <&kp QUESTION>;
            key-positions = <5 4>;
        };

        myexclamation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <16 17>;
        };

        myminus {
            bindings = <&kp MINUS>;
            key-positions = <28 29>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEF {
            display-name = "Base";
            bindings = <
&kp TAB    &kp Q        &kp W       &kp E         &kp R                     &kp T                         &kp Y         &kp U                    &kp I              &kp O       &kp P           &kp BACKSPACE
&kp RSHFT  &hm LCTRL A  &hm LALT S  &hm LGUI D    &hm LSHIFT F              &kp G                         &kp H         &hm RSHIFT J             &hm RGUI K         &hm RALT L  &hm RCTRL SEMI  &kp SQT
&kp LCTRL  &kp Z        &kp X       &kp C         &kp V                     &kp B                         &kp N         &kp M                    &kp COMMA          &kp DOT     &kp SLASH       &kp RSHFT
                                    &lt 2 ESCAPE  &mt LEFT_SHIFT BACKSPACE  &mt LEFT_GUI LA(BACKSPACE)    &lt 1 RETURN  &mt RIGHT_CONTROL SPACE  &mt RIGHT_ALT TAB
            >;
        };

        NAV {
            display-name = "NavNum";
            bindings = <
&trans      &kp N1  &kp N2    &kp N3        &kp N4           &kp N5           &kp N6      &kp N7  &kp N8  &kp N9  &kp N0  &trans
&caps_word  &trans  &trans    &kp UP_ARROW  &browsertab      &kp PAGE_UP      &kp N0      &kp N4  &kp N5  &kp N6  &trans  &trans
&trans      &trans  &kp LEFT  &kp DOWN      &kp RIGHT_ARROW  &kp PAGE_DOWN    &kp PERIOD  &kp N1  &kp N2  &kp N3  &trans  &trans
                              &trans        &trans           &trans           &trans      &trans  &trans
            >;
        };

        SYM {
            display-name = "Symbols";
            bindings = <
&trans  &kp EXCL  &kp AT          &kp HASH        &kp DLLR         &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LEFT_PARENTHESIS  &kp RPAR  &trans
&trans  &trans    &trans          &kp UP_ARROW    &trans           &kp GRAVE    &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT              &kp BSLH  &trans
&trans  &trans    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp TILDE    &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC              &kp PIPE  &trans
                                  &trans          &trans           &trans       &trans     &trans     &trans
            >;
        };

        ADJ {
            display-name = "System";
            bindings = <
&trans  &kp F1        &kp F2        &kp F3        &kp F4      &kp F5            &kp F6          &kp F7          &kp F8          &kp F9           &kp F10      &trans
&trans  &kp F11       &kp F12       &trans        &trans      &studio_unlock    &msc SCRL_UP    &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &trans       &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_CLR  &bt BT_CLR_ALL    &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &bootloader  &trans
                                    &trans        &trans      &trans            &trans          &trans          &trans
            >;
        };

        EXTRA {
            display-name = "extra";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans       &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans       &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &bootloader  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        l3 {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
